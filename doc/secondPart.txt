-- homepage
Hi everyone, welcome to today's session.
We'll talk about how we built a frontend project in XXX project, and show how we make all of those work together in our code.
All the session, We'll focus on the technology in frontend, not the devops or other skills.
We used many frameworks to make the code easy to write, test, build, deploy and maintain.
Let's introduce some of those to you.

-- technical map
It's a technical map for our code.
We use the NPM, React and Typescript as our base framework to support the OOP and Component function.
And for user experience, the MUI is our choose.
And for the restful api call, we chose Axios as the solution.
And for the developing without the backend, we chose MirageJs.
And for the testing, we chose Jest and Testing Library to test both the logic and UI.
And for the code check and format, we chose the eslint and husky.
That's all for the frameworks we'll share today. Next, let's share some sample introduction for all the frameworks to you.


-- React


-- MUI
MUI is a popular React UI framework. It provides a fast way to develop React applications. We can reuse many components already created by MUI team.

It's easy to import it to our React project. Just follow the documents at their website.

And for the components, we can use it in our code after import it the component.

We can customize MUI with our own theme. With the ThemeProvider can change the colors, the typography and much more.

-- Axios
We always need to communicate with the backend, and usually using RESTful apis.
So we chose Axios to finish the network invoke.

It's easy to import Axios to our Node.js project, just execute the shell.


-- MirageJs
When we develop the frontend in local, there always has a problem that we can't connect to the backend.
So we can try to build a mock server which can mock the api response without backend.
And we chose MirageJs to do this work.

Like others, we can use npm install to quick import it to our project.
Also, we use a flag save-dev in the shell, so it'll be effective only before building the code,
and won't goto our environment.

1st, import the createServer form MirageJs.
2nd, use the createServer method to build a mock server.
3rd, we can define the url we want to mock.
Then, all http requests contained in the list from our code in frontend will proxy by MirageJs

-- Test
To make our code maintainable and strong, we must have complete tests. Not only the logic, but also the UI in frontend.
We chose Jest as our base test framework. It's the most popular test framework for JS code. Just like Junit for Java.
And chose Testing Library to test the UI part.

-- Eslint
To keep our code readable and maintainable, we should make sure all our code are in same style.
We use Eslint to do this work. It just like checkStyle or FindBugs for Java.


-- Husky
To make the code clear in the repo.
We add a git hook before each commit to make sure no code error or test error in our code.
We chose Husky to do this work.

